// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
// datasource db {
//   provider     = "mysql"
//   url          = env("DATABASE_URL")
//   relationMode = "prisma"
// }


model User {
  id         String  @id @default(uuid())
  userName   String  @unique
  email      String  @unique
  password   String
  imageUrl   String  @default("")
  isVerified Boolean @default(false)

  servers Server[]
  members Member[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Server {
  id         String @id @default(uuid())
  name       String
  imageUrl   String @db.Text
  inviteCode String @unique
  adminId    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users User @relation(fields: [adminId], references: [id], onDelete: Cascade)

  channels Channel[]
  members  Member[]
}

enum ChannelType {
  TEXT
  VOICE
  VIDEO
}

model Channel {
  id       Int         @id @default(autoincrement())
  name     String
  type     ChannelType @default(TEXT)
  serverId String 

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  server Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  channelMessage ChannelMessage[]
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

model Member {
  id       Int        @id @default(autoincrement())
  userId   String
  serverId String
  role     MemberRole @default(GUEST)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  server Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  channelMessage ChannelMessage[]
}

enum ChannelMessageType {
  TEXT
  IMAGE
  PDF
}
model ChannelMessage {
  id        String  @id @default(uuid())
  content   String  @db.Text
  memberId  Int
  channelId Int
  type ChannelMessageType @default(TEXT)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  members Member  @relation(fields: [memberId], references: [id], onDelete: Cascade)
  channel Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)
}
